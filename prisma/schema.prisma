generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  name        String?
  role        Role      @default(User)
  picture     String?
  phone       String?
  status      Status    @default(ACTIVE)
  isVerified  Boolean   @default(true)
  createdAt   DateTime  @default(now()) 
  updatedAt   DateTime  @updatedAt
  blogs       Blog[]
  projects    Project[]
  messages    Message[] // ðŸ‘ˆ all messages sent by this user
}

enum Role {
  Admin
  User
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCKED
}

model Blog {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  coverImage  String?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String
  thumbnail   String?
  liveUrl     String?
  repoUrl     String?
  features    String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     Int
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Message {
  id          Int          @id @default(autoincrement())
  name        String
  email       String
  subject     String?
  content     String
  status      MessageStatus @default(NEW)
  createdAt   DateTime     @default(now())
  senderId    Int?         // optional if guests can message
  sender      User?        @relation(fields: [senderId], references: [id], onDelete: SetNull)
}

enum MessageStatus {
  NEW
  READ
  REPLIED
}
